{"version":3,"file":"file-input.component.d.ts","sources":["file-input.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA","sourcesContent":["import { Platform } from '@angular/cdk/platform';\r\nimport { ChangeDetectorRef, DoCheck, ElementRef, OnDestroy } from '@angular/core';\r\nimport { ControlValueAccessor, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\r\nimport { CanUpdateErrorState, ErrorStateMatcher, ThemePalette, CanUpdateErrorStateCtor } from '@angular/material/core';\r\nimport { MatFormFieldControl } from '@angular/material/form-field';\r\nimport { Subject } from 'rxjs';\r\nimport { FileOrArrayFile } from './file-input-type';\r\ndeclare class NgxMatInputBase {\r\n    _defaultErrorStateMatcher: ErrorStateMatcher;\r\n    _parentForm: NgForm;\r\n    _parentFormGroup: FormGroupDirective;\r\n    /** @docs-private */\r\n    ngControl: NgControl;\r\n    constructor(_defaultErrorStateMatcher: ErrorStateMatcher, _parentForm: NgForm, _parentFormGroup: FormGroupDirective, \r\n    /** @docs-private */\r\n    ngControl: NgControl);\r\n}\r\ndeclare const _NgxMatInputMixinBase: CanUpdateErrorStateCtor & typeof NgxMatInputBase;\r\nexport declare class NgxMatFileInputIcon {\r\n}\r\nexport declare class NgxMatFileInputComponent extends _NgxMatInputMixinBase implements MatFormFieldControl<FileOrArrayFile>, OnDestroy, DoCheck, CanUpdateErrorState, ControlValueAccessor {\r\n    protected _elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>;\r\n    protected _platform: Platform;\r\n    private _cd;\r\n    ngControl: NgControl;\r\n    private _inputFileRef;\r\n    private _inputValueRef;\r\n    /** Custom icon set by the consumer. */\r\n    _customIcon: NgxMatFileInputIcon;\r\n    color: ThemePalette;\r\n    fileNames: string;\r\n    protected _uid: string;\r\n    protected _previousNativeValue: any;\r\n    _ariaDescribedby: string;\r\n    readonly stateChanges: Subject<void>;\r\n    focused: boolean;\r\n    errorState: boolean;\r\n    controlType: string;\r\n    autofilled: boolean;\r\n    /** Function when touched */\r\n    _onTouched: () => void;\r\n    /** Function when changed */\r\n    _onChange: (value: FileOrArrayFile) => void;\r\n    get disabled(): boolean;\r\n    set disabled(value: boolean);\r\n    protected _disabled: boolean;\r\n    get id(): string;\r\n    set id(value: string);\r\n    protected _id: string;\r\n    get multiple(): boolean;\r\n    set multiple(value: boolean);\r\n    protected _multiple: boolean;\r\n    placeholder: string;\r\n    separator: string;\r\n    get required(): boolean;\r\n    set required(value: boolean);\r\n    protected _required: boolean;\r\n    errorStateMatcher: ErrorStateMatcher;\r\n    get value(): FileOrArrayFile;\r\n    set value(value: FileOrArrayFile);\r\n    protected _value: FileOrArrayFile;\r\n    get readonly(): boolean;\r\n    set readonly(value: boolean);\r\n    private _readonly;\r\n    /**\r\n     * Limiting accepted file types\r\n     * Example: accept=\"image/png, image/jpeg\" or accept=\".png, .jpg, .jpeg\" â€” Accept PNG or JPEG files.\r\n     */\r\n    get accept(): string;\r\n    set accept(value: string);\r\n    private _accept;\r\n    constructor(_elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>, _platform: Platform, _cd: ChangeDetectorRef, ngControl: NgControl, _parentForm: NgForm, _parentFormGroup: FormGroupDirective, _defaultErrorStateMatcher: ErrorStateMatcher);\r\n    ngOnChanges(): void;\r\n    ngOnDestroy(): void;\r\n    ngDoCheck(): void;\r\n    writeValue(value: FileOrArrayFile): void;\r\n    registerOnChange(fn: (value: any) => void): void;\r\n    registerOnTouched(fn: () => void): void;\r\n    setDisabledState(isDisabled: boolean): void;\r\n    /** Focuses the input. */\r\n    focus(options?: FocusOptions): void;\r\n    _focusChanged(isFocused: boolean): void;\r\n    /** Mark the field as touched */\r\n    _markAsTouched(): void;\r\n    protected _isBadInput(): boolean;\r\n    get empty(): boolean;\r\n    get shouldLabelFloat(): boolean;\r\n    setDescribedByIds(ids: string[]): void;\r\n    openFilePicker(event?: MouseEvent): void;\r\n    handleFiles(filelist: FileList): void;\r\n    /** Handles a click on the control's container. */\r\n    onContainerClick(event: MouseEvent): void;\r\n    private _resetInputFile;\r\n    private _updateInputValue;\r\n}\r\nexport {};\r\n"]}