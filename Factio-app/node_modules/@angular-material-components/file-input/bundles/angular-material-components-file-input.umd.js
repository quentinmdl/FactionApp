(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('@angular/core'),require('@angular/cdk/platform'),require('@angular/forms'),require('@angular/material/core'),require('@angular/material/button'),require('@angular/material/form-field'),require('@angular/common'),require('@angular/material/icon'),require('@angular/material/input'),exports, require('@angular/cdk/coercion'), require('@angular/cdk/platform'), require('@angular/core'), require('@angular/forms'), require('@angular/material/core'), require('@angular/material/form-field'), require('rxjs'), require('@angular/common'), require('@angular/material/button'), require('@angular/material/icon'), require('@angular/material/input')) :
    typeof define === 'function' && define.amd ? define('@angular-material-components/file-input', ['@angular/core','@angular/cdk/platform','@angular/forms','@angular/material/core','@angular/material/button','@angular/material/form-field','@angular/common','@angular/material/icon','@angular/material/input','exports', '@angular/cdk/coercion', '@angular/cdk/platform', '@angular/core', '@angular/forms', '@angular/material/core', '@angular/material/form-field', 'rxjs', '@angular/common', '@angular/material/button', '@angular/material/icon', '@angular/material/input'], factory) :
    (global = global || self, factory(global.ng.core,global.ng.cdk.platform,global.ng.forms,global.ng.material.core,global.ng.material.button,global.ng.material.formField,global.ng.common,global.ng.material.icon,global.ng.material.input,(global['angular-material-components'] = global['angular-material-components'] || {}, global['angular-material-components']['file-input'] = {}), global.ng.cdk.coercion, global.ng.cdk.platform, global.ng.core, global.ng.forms, global.ng.material.core, global.ng.material.formField, global.rxjs, global.ng.common, global.ng.material.button, global.ng.material.icon, global.ng.material.input));
}(this, (function (ɵngcc0,ɵngcc1,ɵngcc2,ɵngcc3,ɵngcc4,ɵngcc5,ɵngcc6,ɵngcc7,ɵngcc8,exports, coercion, platform, core, forms, core$1, formField, rxjs, common, button, icon, input) { 
var _c0 = ["inputFile"];
var _c1 = ["inputValue"];
function NgxMatFileInputComponent_mat_icon_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "mat-icon", 7);
    ɵngcc0.ɵɵtext(1, "attach_file");
    ɵngcc0.ɵɵelementEnd();
} }
var _c2 = [[["", "ngxMatFileInputIcon", ""]]];
var _c3 = ["[ngxMatFileInputIcon]"];
'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, exports) {
        for (var p in m)
            if (p !== "default" && !exports.hasOwnProperty(p))
                __createBinding(exports, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    ;
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (Object.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }
    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    /** @type {?} */
    var nextUniqueId = 0;
    var NgxMatInputBase = /** @class */ (function () {
        /**
         * @param {?} _defaultErrorStateMatcher
         * @param {?} _parentForm
         * @param {?} _parentFormGroup
         * @param {?} ngControl
         */
        function NgxMatInputBase(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {
            this._defaultErrorStateMatcher = _defaultErrorStateMatcher;
            this._parentForm = _parentForm;
            this._parentFormGroup = _parentFormGroup;
            this.ngControl = ngControl;
        }
        return NgxMatInputBase;
    }());
    if (false) {
        /** @type {?} */
        NgxMatInputBase.prototype._defaultErrorStateMatcher;
        /** @type {?} */
        NgxMatInputBase.prototype._parentForm;
        /** @type {?} */
        NgxMatInputBase.prototype._parentFormGroup;
        /**
         * \@docs-private
         * @type {?}
         */
        NgxMatInputBase.prototype.ngControl;
    }
    /** @type {?} */
    var _NgxMatInputMixinBase = core$1.mixinErrorState(NgxMatInputBase);
    var NgxMatFileInputIcon = /** @class */ (function () {
        function NgxMatFileInputIcon() {
        }
NgxMatFileInputIcon.ɵfac = function NgxMatFileInputIcon_Factory(t) { return new (t || NgxMatFileInputIcon)(); };
NgxMatFileInputIcon.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: NgxMatFileInputIcon, selectors: [["", "ngxMatFileInputIcon", ""]] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxMatFileInputIcon, [{
        type: core.Directive,
        args: [{
                selector: '[ngxMatFileInputIcon]'
            }]
    }], function () { return []; }, null); })();
        return NgxMatFileInputIcon;
    }());
    var NgxMatFileInputComponent = /** @class */ (function (_super) {
        __extends(NgxMatFileInputComponent, _super);
        /**
         * @param {?} _elementRef
         * @param {?} _platform
         * @param {?} _cd
         * @param {?} ngControl
         * @param {?} _parentForm
         * @param {?} _parentFormGroup
         * @param {?} _defaultErrorStateMatcher
         */
        function NgxMatFileInputComponent(_elementRef, _platform, _cd, ngControl, _parentForm, _parentFormGroup, _defaultErrorStateMatcher) {
            var _this = _super.call(this, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) || this;
            _this._elementRef = _elementRef;
            _this._platform = _platform;
            _this._cd = _cd;
            _this.ngControl = ngControl;
            _this.color = 'primary';
            _this.fileNames = null;
            _this._uid = "ngx-mat-fileinput-" + nextUniqueId++;
            _this.stateChanges = new rxjs.Subject();
            _this.focused = false;
            _this.controlType = 'ngx-mat-file-input';
            _this.autofilled = false;
            /**
             * Function when touched
             */
            _this._onTouched = ( /**
             * @return {?}
             */function () { });
            /**
             * Function when changed
             */
            _this._onChange = ( /**
             * @return {?}
             */function () { });
            _this._disabled = false;
            _this._multiple = false;
            _this.placeholder = 'Choose a file';
            _this.separator = ',';
            _this._required = false;
            _this._readonly = true;
            _this.id = _this.id;
            if (_this.ngControl) {
                _this.ngControl.valueAccessor = _this;
            }
            return _this;
        }
        Object.defineProperty(NgxMatFileInputComponent.prototype, "disabled", {
            /**
             * @return {?}
             */
            get: function () {
                if (this.ngControl && this.ngControl.disabled !== null) {
                    return this.ngControl.disabled;
                }
                return this._disabled;
            },
            /**
             * @param {?} value
             * @return {?}
             */
            set: function (value) {
                this._disabled = coercion.coerceBooleanProperty(value);
                if (this.focused) {
                    this.focused = false;
                    this.stateChanges.next();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NgxMatFileInputComponent.prototype, "id", {
            /**
             * @return {?}
             */
            get: function () { return this._id; },
            /**
             * @param {?} value
             * @return {?}
             */
            set: function (value) { this._id = value || this._uid; },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NgxMatFileInputComponent.prototype, "multiple", {
            /**
             * @return {?}
             */
            get: function () { return this._multiple; },
            /**
             * @param {?} value
             * @return {?}
             */
            set: function (value) {
                this._multiple = coercion.coerceBooleanProperty(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NgxMatFileInputComponent.prototype, "required", {
            /**
             * @return {?}
             */
            get: function () { return this._required; },
            /**
             * @param {?} value
             * @return {?}
             */
            set: function (value) { this._required = coercion.coerceBooleanProperty(value); },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NgxMatFileInputComponent.prototype, "value", {
            /**
             * @return {?}
             */
            get: function () { return this._value; },
            /**
             * @param {?} value
             * @return {?}
             */
            set: function (value) {
                this._value = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NgxMatFileInputComponent.prototype, "readonly", {
            /**
             * @return {?}
             */
            get: function () { return this._readonly; },
            /**
             * @param {?} value
             * @return {?}
             */
            set: function (value) { this._readonly = coercion.coerceBooleanProperty(value); },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NgxMatFileInputComponent.prototype, "accept", {
            /**
             * Limiting accepted file types
             * Example: accept="image/png, image/jpeg" or accept=".png, .jpg, .jpeg" — Accept PNG or JPEG files.
             * @return {?}
             */
            get: function () { return this._accept; },
            /**
             * @param {?} value
             * @return {?}
             */
            set: function (value) {
                this._accept = value;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * @return {?}
         */
        NgxMatFileInputComponent.prototype.ngOnChanges = function () {
            this.stateChanges.next();
        };
        /**
         * @return {?}
         */
        NgxMatFileInputComponent.prototype.ngOnDestroy = function () {
            this.stateChanges.complete();
        };
        /**
         * @return {?}
         */
        NgxMatFileInputComponent.prototype.ngDoCheck = function () {
            if (this.ngControl) {
                this.updateErrorState();
            }
        };
        // Implemented as part of ControlValueAccessor.
        /**
         * @param {?} value
         * @return {?}
         */
        NgxMatFileInputComponent.prototype.writeValue = function (value) {
            this._updateInputValue(value);
        };
        // Implemented as part of ControlValueAccessor.
        /**
         * @param {?} fn
         * @return {?}
         */
        NgxMatFileInputComponent.prototype.registerOnChange = function (fn) {
            this._onChange = fn;
        };
        // Implemented as part of ControlValueAccessor.
        /**
         * @param {?} fn
         * @return {?}
         */
        NgxMatFileInputComponent.prototype.registerOnTouched = function (fn) {
            this._onTouched = fn;
        };
        // Implemented as part of ControlValueAccessor.
        /**
         * @param {?} isDisabled
         * @return {?}
         */
        NgxMatFileInputComponent.prototype.setDisabledState = function (isDisabled) {
            this.disabled = isDisabled;
            this.stateChanges.next();
        };
        /**
         * Focuses the input.
         * @param {?=} options
         * @return {?}
         */
        NgxMatFileInputComponent.prototype.focus = function (options) {
            this._inputValueRef.nativeElement.focus(options);
        };
        /**
         * @param {?} isFocused
         * @return {?}
         */
        NgxMatFileInputComponent.prototype._focusChanged = function (isFocused) {
            if (isFocused !== this.focused && (!this.readonly || !isFocused)) {
                this.focused = isFocused;
                this.stateChanges.next();
            }
        };
        /**
         * Mark the field as touched
         * @return {?}
         */
        NgxMatFileInputComponent.prototype._markAsTouched = function () {
            this._onTouched();
            this._cd.markForCheck();
            this.stateChanges.next();
        };
        /**
         * @protected
         * @return {?}
         */
        NgxMatFileInputComponent.prototype._isBadInput = function () {
            /** @type {?} */
            var validity = (( /** @type {?} */(this._inputValueRef.nativeElement))).validity;
            return validity && validity.badInput;
        };
        Object.defineProperty(NgxMatFileInputComponent.prototype, "empty", {
            /**
             * @return {?}
             */
            get: function () {
                return !this._inputValueRef.nativeElement.value && !this._isBadInput() &&
                    !this.autofilled;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NgxMatFileInputComponent.prototype, "shouldLabelFloat", {
            /**
             * @return {?}
             */
            get: function () {
                return this.focused || !this.empty;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * @param {?} ids
         * @return {?}
         */
        NgxMatFileInputComponent.prototype.setDescribedByIds = function (ids) {
            this._ariaDescribedby = ids.join(' ');
        };
        /**
         * @param {?=} event
         * @return {?}
         */
        NgxMatFileInputComponent.prototype.openFilePicker = function (event) {
            this._inputFileRef.nativeElement.click();
            if (event) {
                event.preventDefault();
                event.stopPropagation();
            }
            this._markAsTouched();
        };
        /**
         * @param {?} filelist
         * @return {?}
         */
        NgxMatFileInputComponent.prototype.handleFiles = function (filelist) {
            if (filelist.length > 0) {
                /** @type {?} */
                var files = new Array();
                for (var i = 0; i < filelist.length; i++) {
                    files.push(filelist.item(i));
                }
                this._updateInputValue(files);
                this._resetInputFile();
                this._onChange(this.multiple ? files : files[0]);
            }
        };
        /**
         * Handles a click on the control's container.
         * @param {?} event
         * @return {?}
         */
        NgxMatFileInputComponent.prototype.onContainerClick = function (event) { };
        ;
        /**
         * @private
         * @return {?}
         */
        NgxMatFileInputComponent.prototype._resetInputFile = function () {
            this._inputFileRef.nativeElement.value = "";
        };
        /**
         * @private
         * @param {?} files
         * @return {?}
         */
        NgxMatFileInputComponent.prototype._updateInputValue = function (files) {
            /** @type {?} */
            var text = null;
            if (files) {
                if (Array.isArray(files)) {
                    text = this._multiple
                        ? files.map(( /**
                         * @param {?} x
                         * @return {?}
                         */function (/**
                         * @param {?} x
                         * @return {?}
                         */ x) { return x.name; })).join(this.separator)
                        : files[0].name;
                }
                else {
                    text = files.name != null ? files.name : null;
                }
            }
            this._inputValueRef.nativeElement.value = text;
        };
NgxMatFileInputComponent.ɵfac = function NgxMatFileInputComponent_Factory(t) { return new (t || NgxMatFileInputComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.NgControl, 10), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.FormGroupDirective, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.ErrorStateMatcher)); };
NgxMatFileInputComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: NgxMatFileInputComponent, selectors: [["ngx-mat-file-input"]], contentQueries: function NgxMatFileInputComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, NgxMatFileInputIcon, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._customIcon = _t.first);
    } }, viewQuery: function NgxMatFileInputComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵstaticViewQuery(_c0, true);
        ɵngcc0.ɵɵstaticViewQuery(_c1, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._inputFileRef = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._inputValueRef = _t.first);
    } }, hostAttrs: [1, "ngx-mat-file-input"], inputs: { disabled: "disabled", id: "id", multiple: "multiple", required: "required", value: "value", readonly: "readonly", accept: "accept", color: "color", placeholder: "placeholder", separator: "separator", errorStateMatcher: "errorStateMatcher" }, exportAs: ["ngx-mat-file-input"], features: [ɵngcc0.ɵɵProvidersFeature([
            { provide: formField.MatFormFieldControl, useExisting: core.forwardRef(( /**
                         * @return {?}
                         */function () { return NgxMatFileInputComponent; })) }
        ]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c3, decls: 8, vars: 13, consts: [["autocomplete", "off", 1, "mat-input-element", "mat-form-field-autofill-control", 3, "disabled", "required"], ["inputValue", ""], [1, "mat-form-field-suffix"], ["matSuffix", "", "mat-icon-button", "", "type", "button", 1, "button-browse", 3, "color", "disabled", "click"], ["class", "ngx-mat-file-input--default-icon", 4, "ngIf"], ["type", "file", 1, "input-file", 3, "multiple", "accept", "change"], ["inputFile", ""], [1, "ngx-mat-file-input--default-icon"]], template: function NgxMatFileInputComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef(_c2);
        ɵngcc0.ɵɵelement(0, "input", 0, 1);
        ɵngcc0.ɵɵelementStart(2, "div", 2);
        ɵngcc0.ɵɵelementStart(3, "button", 3);
        ɵngcc0.ɵɵlistener("click", function NgxMatFileInputComponent_Template_button_click_3_listener($event) { return ctx.openFilePicker($event); });
        ɵngcc0.ɵɵtemplate(4, NgxMatFileInputComponent_mat_icon_4_Template, 2, 0, "mat-icon", 4);
        ɵngcc0.ɵɵprojection(5);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(6, "input", 5, 6);
        ɵngcc0.ɵɵlistener("change", function NgxMatFileInputComponent_Template_input_change_6_listener($event) { return ctx.handleFiles($event.target.files); });
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("disabled", ctx.disabled)("required", ctx.required);
        ɵngcc0.ɵɵattribute("id", ctx.id)("placeholder", ctx.placeholder)("readonly", ctx.readonly || null)("aria-describedby", ctx._ariaDescribedby || null)("aria-invalid", ctx.errorState)("aria-required", ctx.required.toString());
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("color", ctx.color)("disabled", ctx.disabled);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx._customIcon);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("multiple", ctx.multiple)("accept", ctx.accept);
    } }, directives: [ɵngcc4.MatButton, ɵngcc5.MatSuffix, ɵngcc6.NgIf, ɵngcc7.MatIcon], styles: [".mat-form-field-appearance-legacy .mat-form-field-prefix .ngx-mat-file-input--default-icon,.mat-form-field-appearance-legacy .mat-form-field-suffix .ngx-mat-file-input--default-icon{width:1em}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .ngx-mat-file-input--default-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .ngx-mat-file-input--default-icon{display:block;height:1.5em;width:1.5em}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .ngx-mat-file-input--default-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .ngx-mat-file-input--default-icon{margin:auto}.ngx-mat-file-input{align-items:center;display:flex;height:18px;line-height:18px}.ngx-mat-file-input .input-file{display:block;height:0;visibility:hidden;width:0}"], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxMatFileInputComponent, [{
        type: core.Component,
        args: [{
                selector: 'ngx-mat-file-input',
                template: "<input #inputValue autocomplete=\"off\" class=\"mat-input-element mat-form-field-autofill-control\" [attr.id]='id'\r\n  [attr.placeholder]='placeholder' [disabled]='disabled' [required]='required' [attr.readonly]='readonly || null'\r\n  [attr.aria-describedby]='_ariaDescribedby || null' [attr.aria-invalid]='errorState'\r\n  [attr.aria-required]='required.toString()'>\r\n<div class=\"mat-form-field-suffix\">\r\n  <button matSuffix mat-icon-button [color]=\"color\" class=\"button-browse\"  (click)=\"openFilePicker($event)\" type=\"button\"\r\n   [disabled]=\"disabled\">\r\n    <mat-icon *ngIf=\"!_customIcon\" class=\"ngx-mat-file-input--default-icon\">attach_file</mat-icon>\r\n    <ng-content select=\"[ngxMatFileInputIcon]\"></ng-content>\r\n  </button>\r\n</div>\r\n<input type=\"file\" #inputFile (change)=\"handleFiles($event.target.files)\" class=\"input-file\"\r\n  [multiple]=\"multiple\" [accept]=\"accept\">",
                encapsulation: core.ViewEncapsulation.None,
                host: {
                    'class': 'ngx-mat-file-input'
                },
                providers: [
                    { provide: formField.MatFormFieldControl, useExisting: core.forwardRef(( /**
                                 * @return {?}
                                 */function () { return NgxMatFileInputComponent; })) }
                ],
                exportAs: 'ngx-mat-file-input',
                styles: [".mat-form-field-appearance-legacy .mat-form-field-prefix .ngx-mat-file-input--default-icon,.mat-form-field-appearance-legacy .mat-form-field-suffix .ngx-mat-file-input--default-icon{width:1em}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .ngx-mat-file-input--default-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .ngx-mat-file-input--default-icon{display:block;height:1.5em;width:1.5em}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .ngx-mat-file-input--default-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .ngx-mat-file-input--default-icon{margin:auto}.ngx-mat-file-input{align-items:center;display:flex;height:18px;line-height:18px}.ngx-mat-file-input .input-file{display:block;height:0;visibility:hidden;width:0}"]
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.Platform }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc2.NgControl, decorators: [{
                type: core.Optional
            }, {
                type: core.Self
            }] }, { type: ɵngcc2.NgForm, decorators: [{
                type: core.Optional
            }] }, { type: ɵngcc2.FormGroupDirective, decorators: [{
                type: core.Optional
            }] }, { type: ɵngcc3.ErrorStateMatcher }]; }, { disabled: [{
            type: core.Input
        }], id: [{
            type: core.Input
        }], multiple: [{
            type: core.Input
        }], required: [{
            type: core.Input
        }], value: [{
            type: core.Input
        }], readonly: [{
            type: core.Input
        }], accept: [{
            type: core.Input
        }], _inputFileRef: [{
            type: core.ViewChild,
            args: ['inputFile', { static: true }]
        }], _inputValueRef: [{
            type: core.ViewChild,
            args: ['inputValue', { static: true }]
        }], _customIcon: [{
            type: core.ContentChild,
            args: [NgxMatFileInputIcon]
        }], color: [{
            type: core.Input
        }], placeholder: [{
            type: core.Input
        }], separator: [{
            type: core.Input
        }], errorStateMatcher: [{
            type: core.Input
        }] }); })();
        return NgxMatFileInputComponent;
    }(_NgxMatInputMixinBase));
    /** @nocollapse */
    NgxMatFileInputComponent.ctorParameters = function () { return [
        { type: core.ElementRef },
        { type: platform.Platform },
        { type: core.ChangeDetectorRef },
        { type: forms.NgControl, decorators: [{ type: core.Optional }, { type: core.Self }] },
        { type: forms.NgForm, decorators: [{ type: core.Optional }] },
        { type: forms.FormGroupDirective, decorators: [{ type: core.Optional }] },
        { type: core$1.ErrorStateMatcher }
    ]; };
    NgxMatFileInputComponent.propDecorators = {
        _inputFileRef: [{ type: core.ViewChild, args: ['inputFile', { static: true },] }],
        _inputValueRef: [{ type: core.ViewChild, args: ['inputValue', { static: true },] }],
        _customIcon: [{ type: core.ContentChild, args: [NgxMatFileInputIcon,] }],
        color: [{ type: core.Input }],
        disabled: [{ type: core.Input }],
        id: [{ type: core.Input }],
        multiple: [{ type: core.Input }],
        placeholder: [{ type: core.Input }],
        separator: [{ type: core.Input }],
        required: [{ type: core.Input }],
        errorStateMatcher: [{ type: core.Input }],
        value: [{ type: core.Input }],
        readonly: [{ type: core.Input }],
        accept: [{ type: core.Input }]
    };
    if (false) {
        /**
         * @type {?}
         * @private
         */
        NgxMatFileInputComponent.prototype._inputFileRef;
        /**
         * @type {?}
         * @private
         */
        NgxMatFileInputComponent.prototype._inputValueRef;
        /**
         * Custom icon set by the consumer.
         * @type {?}
         */
        NgxMatFileInputComponent.prototype._customIcon;
        /** @type {?} */
        NgxMatFileInputComponent.prototype.color;
        /** @type {?} */
        NgxMatFileInputComponent.prototype.fileNames;
        /**
         * @type {?}
         * @protected
         */
        NgxMatFileInputComponent.prototype._uid;
        /**
         * @type {?}
         * @protected
         */
        NgxMatFileInputComponent.prototype._previousNativeValue;
        /** @type {?} */
        NgxMatFileInputComponent.prototype._ariaDescribedby;
        /** @type {?} */
        NgxMatFileInputComponent.prototype.stateChanges;
        /** @type {?} */
        NgxMatFileInputComponent.prototype.focused;
        /** @type {?} */
        NgxMatFileInputComponent.prototype.errorState;
        /** @type {?} */
        NgxMatFileInputComponent.prototype.controlType;
        /** @type {?} */
        NgxMatFileInputComponent.prototype.autofilled;
        /**
         * Function when touched
         * @type {?}
         */
        NgxMatFileInputComponent.prototype._onTouched;
        /**
         * Function when changed
         * @type {?}
         */
        NgxMatFileInputComponent.prototype._onChange;
        /**
         * @type {?}
         * @protected
         */
        NgxMatFileInputComponent.prototype._disabled;
        /**
         * @type {?}
         * @protected
         */
        NgxMatFileInputComponent.prototype._id;
        /**
         * @type {?}
         * @protected
         */
        NgxMatFileInputComponent.prototype._multiple;
        /** @type {?} */
        NgxMatFileInputComponent.prototype.placeholder;
        /** @type {?} */
        NgxMatFileInputComponent.prototype.separator;
        /**
         * @type {?}
         * @protected
         */
        NgxMatFileInputComponent.prototype._required;
        /** @type {?} */
        NgxMatFileInputComponent.prototype.errorStateMatcher;
        /**
         * @type {?}
         * @protected
         */
        NgxMatFileInputComponent.prototype._value;
        /**
         * @type {?}
         * @private
         */
        NgxMatFileInputComponent.prototype._readonly;
        /**
         * @type {?}
         * @private
         */
        NgxMatFileInputComponent.prototype._accept;
        /**
         * @type {?}
         * @protected
         */
        NgxMatFileInputComponent.prototype._elementRef;
        /**
         * @type {?}
         * @protected
         */
        NgxMatFileInputComponent.prototype._platform;
        /**
         * @type {?}
         * @private
         */
        NgxMatFileInputComponent.prototype._cd;
        /** @type {?} */
        NgxMatFileInputComponent.prototype.ngControl;
        /* Skipping unhandled member: ;*/
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/file-input.module.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgxMatFileInputModule = /** @class */ (function () {
        function NgxMatFileInputModule() {
        }
NgxMatFileInputModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgxMatFileInputModule });
NgxMatFileInputModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgxMatFileInputModule_Factory(t) { return new (t || NgxMatFileInputModule)(); }, imports: [[
            common.CommonModule,
            button.MatButtonModule,
            icon.MatIconModule,
            formField.MatFormFieldModule,
            input.MatInputModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgxMatFileInputModule, { declarations: [NgxMatFileInputComponent, NgxMatFileInputIcon], imports: [ɵngcc6.CommonModule, ɵngcc4.MatButtonModule, ɵngcc7.MatIconModule, ɵngcc5.MatFormFieldModule, ɵngcc8.MatInputModule], exports: [NgxMatFileInputComponent, NgxMatFileInputIcon] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxMatFileInputModule, [{
        type: core.NgModule,
        args: [{
                declarations: [
                    NgxMatFileInputComponent,
                    NgxMatFileInputIcon
                ],
                imports: [
                    common.CommonModule,
                    button.MatButtonModule,
                    icon.MatIconModule,
                    formField.MatFormFieldModule,
                    input.MatInputModule
                ],
                exports: [
                    NgxMatFileInputComponent,
                    NgxMatFileInputIcon
                ]
            }]
    }], function () { return []; }, null); })();
        return NgxMatFileInputModule;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/file-input-helper.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @param {?} number
     * @return {?}
     */
    function calculFileSize(number) {
        if (number < 1024) {
            return number + 'bytes';
        }
        else if (number >= 1024 && number < 1048576) {
            return (number / 1024).toFixed(1) + 'KB';
        }
        else if (number >= 1048576) {
            return (number / 1048576).toFixed(1) + 'MB';
        }
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/validators/max-size.validator.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Validator for size of file
     * @param {?} max Max of size of file (in bytes)
     * @return {?}
     */
    function MaxSizeValidator(max) {
        return ( /**
         * @param {?} ctrl
         * @return {?}
         */function (ctrl) {
            max = Number(max);
            if (isNaN(max)) {
                throw 'MaxSizeValidator: max of size of file is invalid';
            }
            if (!ctrl.value)
                return null;
            /** @type {?} */
            var files = ctrl.value;
            if (!Array.isArray(ctrl.value)) {
                files = [ctrl.value];
            }
            if (!files.length)
                return null;
            /** @type {?} */
            var add = ( /**
             * @param {?} a
             * @param {?} b
             * @return {?}
             */function (a, b) { return a + b; });
            /** @type {?} */
            var sumSize = files.map(( /**
             * @param {?} x
             * @return {?}
             */function (/**
             * @param {?} x
             * @return {?}
             */ x) { return x.size; })).reduce(add);
            if (sumSize > max) {
                return {
                    maxSize: true
                };
            }
            return null;
        });
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/validators/accept.validator.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     *
     * @param {?} accept Allowable type of file
     * @return {?}
     */
    function AcceptValidator(accept) {
        return ( /**
         * @param {?} ctrl
         * @return {?}
         */function (ctrl) {
            if (!accept) {
                throw ('AcceptValidator: allowable type of file can not be empty');
            }
            if (ctrl.value == null)
                return null;
            if (!accept.includes(ctrl.value.type)) {
                return {
                    accept: true
                };
            }
            return null;
        });
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/validators/index.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * Generated from: public-api.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * Generated from: angular-material-components-file-input.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.AcceptValidator = AcceptValidator;
    exports.MaxSizeValidator = MaxSizeValidator;
    exports.NgxMatFileInputComponent = NgxMatFileInputComponent;
    exports.NgxMatFileInputIcon = NgxMatFileInputIcon;
    exports.NgxMatFileInputModule = NgxMatFileInputModule;
    exports.calculFileSize = calculFileSize;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=angular-material-components-file-input.umd.js.map