/**
 * @fileoverview added by tsickle
 * Generated from: lib/file-input.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { Platform } from '@angular/cdk/platform';
import { ChangeDetectorRef, Component, ElementRef, forwardRef, Input, Optional, Self, ViewChild, ViewEncapsulation, Directive, ContentChild } from '@angular/core';
import { FormGroupDirective, NgControl, NgForm } from '@angular/forms';
import { ErrorStateMatcher, mixinErrorState } from '@angular/material/core';
import { MatFormFieldControl } from '@angular/material/form-field';
import { Subject } from 'rxjs';
/** @type {?} */
let nextUniqueId = 0;
class NgxMatInputBase {
    /**
     * @param {?} _defaultErrorStateMatcher
     * @param {?} _parentForm
     * @param {?} _parentFormGroup
     * @param {?} ngControl
     */
    constructor(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {
        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;
        this._parentForm = _parentForm;
        this._parentFormGroup = _parentFormGroup;
        this.ngControl = ngControl;
    }
}
if (false) {
    /** @type {?} */
    NgxMatInputBase.prototype._defaultErrorStateMatcher;
    /** @type {?} */
    NgxMatInputBase.prototype._parentForm;
    /** @type {?} */
    NgxMatInputBase.prototype._parentFormGroup;
    /**
     * \@docs-private
     * @type {?}
     */
    NgxMatInputBase.prototype.ngControl;
}
/** @type {?} */
const _NgxMatInputMixinBase = mixinErrorState(NgxMatInputBase);
export class NgxMatFileInputIcon {
}
NgxMatFileInputIcon.decorators = [
    { type: Directive, args: [{
                selector: '[ngxMatFileInputIcon]'
            },] }
];
export class NgxMatFileInputComponent extends _NgxMatInputMixinBase {
    /**
     * @param {?} _elementRef
     * @param {?} _platform
     * @param {?} _cd
     * @param {?} ngControl
     * @param {?} _parentForm
     * @param {?} _parentFormGroup
     * @param {?} _defaultErrorStateMatcher
     */
    constructor(_elementRef, _platform, _cd, ngControl, _parentForm, _parentFormGroup, _defaultErrorStateMatcher) {
        super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);
        this._elementRef = _elementRef;
        this._platform = _platform;
        this._cd = _cd;
        this.ngControl = ngControl;
        this.color = 'primary';
        this.fileNames = null;
        this._uid = `ngx-mat-fileinput-${nextUniqueId++}`;
        this.stateChanges = new Subject();
        this.focused = false;
        this.controlType = 'ngx-mat-file-input';
        this.autofilled = false;
        /**
         * Function when touched
         */
        this._onTouched = (/**
         * @return {?}
         */
        () => { });
        /**
         * Function when changed
         */
        this._onChange = (/**
         * @return {?}
         */
        () => { });
        this._disabled = false;
        this._multiple = false;
        this.placeholder = 'Choose a file';
        this.separator = ',';
        this._required = false;
        this._readonly = true;
        this.id = this.id;
        if (this.ngControl) {
            this.ngControl.valueAccessor = this;
        }
    }
    /**
     * @return {?}
     */
    get disabled() {
        if (this.ngControl && this.ngControl.disabled !== null) {
            return this.ngControl.disabled;
        }
        return this._disabled;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set disabled(value) {
        this._disabled = coerceBooleanProperty(value);
        if (this.focused) {
            this.focused = false;
            this.stateChanges.next();
        }
    }
    /**
     * @return {?}
     */
    get id() { return this._id; }
    /**
     * @param {?} value
     * @return {?}
     */
    set id(value) { this._id = value || this._uid; }
    /**
     * @return {?}
     */
    get multiple() { return this._multiple; }
    /**
     * @param {?} value
     * @return {?}
     */
    set multiple(value) {
        this._multiple = coerceBooleanProperty(value);
    }
    /**
     * @return {?}
     */
    get required() { return this._required; }
    /**
     * @param {?} value
     * @return {?}
     */
    set required(value) { this._required = coerceBooleanProperty(value); }
    /**
     * @return {?}
     */
    get value() { return this._value; }
    /**
     * @param {?} value
     * @return {?}
     */
    set value(value) {
        this._value = value;
    }
    /**
     * @return {?}
     */
    get readonly() { return this._readonly; }
    /**
     * @param {?} value
     * @return {?}
     */
    set readonly(value) { this._readonly = coerceBooleanProperty(value); }
    /**
     * Limiting accepted file types
     * Example: accept="image/png, image/jpeg" or accept=".png, .jpg, .jpeg" â€” Accept PNG or JPEG files.
     * @return {?}
     */
    get accept() { return this._accept; }
    /**
     * @param {?} value
     * @return {?}
     */
    set accept(value) {
        this._accept = value;
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        this.stateChanges.next();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.stateChanges.complete();
    }
    /**
     * @return {?}
     */
    ngDoCheck() {
        if (this.ngControl) {
            this.updateErrorState();
        }
    }
    // Implemented as part of ControlValueAccessor.
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this._updateInputValue(value);
    }
    // Implemented as part of ControlValueAccessor.
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this._onChange = fn;
    }
    // Implemented as part of ControlValueAccessor.
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
    // Implemented as part of ControlValueAccessor.
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
        this.stateChanges.next();
    }
    /**
     * Focuses the input.
     * @param {?=} options
     * @return {?}
     */
    focus(options) {
        this._inputValueRef.nativeElement.focus(options);
    }
    /**
     * @param {?} isFocused
     * @return {?}
     */
    _focusChanged(isFocused) {
        if (isFocused !== this.focused && (!this.readonly || !isFocused)) {
            this.focused = isFocused;
            this.stateChanges.next();
        }
    }
    /**
     * Mark the field as touched
     * @return {?}
     */
    _markAsTouched() {
        this._onTouched();
        this._cd.markForCheck();
        this.stateChanges.next();
    }
    /**
     * @protected
     * @return {?}
     */
    _isBadInput() {
        /** @type {?} */
        let validity = ((/** @type {?} */ (this._inputValueRef.nativeElement))).validity;
        return validity && validity.badInput;
    }
    /**
     * @return {?}
     */
    get empty() {
        return !this._inputValueRef.nativeElement.value && !this._isBadInput() &&
            !this.autofilled;
    }
    /**
     * @return {?}
     */
    get shouldLabelFloat() {
        return this.focused || !this.empty;
    }
    /**
     * @param {?} ids
     * @return {?}
     */
    setDescribedByIds(ids) {
        this._ariaDescribedby = ids.join(' ');
    }
    /**
     * @param {?=} event
     * @return {?}
     */
    openFilePicker(event) {
        this._inputFileRef.nativeElement.click();
        if (event) {
            event.preventDefault();
            event.stopPropagation();
        }
        this._markAsTouched();
    }
    /**
     * @param {?} filelist
     * @return {?}
     */
    handleFiles(filelist) {
        if (filelist.length > 0) {
            /** @type {?} */
            const files = new Array();
            for (let i = 0; i < filelist.length; i++) {
                files.push(filelist.item(i));
            }
            this._updateInputValue(files);
            this._resetInputFile();
            this._onChange(this.multiple ? files : files[0]);
        }
    }
    /**
     * Handles a click on the control's container.
     * @param {?} event
     * @return {?}
     */
    onContainerClick(event) { }
    ;
    /**
     * @private
     * @return {?}
     */
    _resetInputFile() {
        this._inputFileRef.nativeElement.value = "";
    }
    /**
     * @private
     * @param {?} files
     * @return {?}
     */
    _updateInputValue(files) {
        /** @type {?} */
        let text = null;
        if (files) {
            if (Array.isArray(files)) {
                text = this._multiple
                    ? files.map((/**
                     * @param {?} x
                     * @return {?}
                     */
                    x => x.name)).join(this.separator)
                    : files[0].name;
            }
            else {
                text = files.name != null ? files.name : null;
            }
        }
        this._inputValueRef.nativeElement.value = text;
    }
}
NgxMatFileInputComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-mat-file-input',
                template: "<input #inputValue autocomplete=\"off\" class=\"mat-input-element mat-form-field-autofill-control\" [attr.id]='id'\r\n  [attr.placeholder]='placeholder' [disabled]='disabled' [required]='required' [attr.readonly]='readonly || null'\r\n  [attr.aria-describedby]='_ariaDescribedby || null' [attr.aria-invalid]='errorState'\r\n  [attr.aria-required]='required.toString()'>\r\n<div class=\"mat-form-field-suffix\">\r\n  <button matSuffix mat-icon-button [color]=\"color\" class=\"button-browse\"  (click)=\"openFilePicker($event)\" type=\"button\"\r\n   [disabled]=\"disabled\">\r\n    <mat-icon *ngIf=\"!_customIcon\" class=\"ngx-mat-file-input--default-icon\">attach_file</mat-icon>\r\n    <ng-content select=\"[ngxMatFileInputIcon]\"></ng-content>\r\n  </button>\r\n</div>\r\n<input type=\"file\" #inputFile (change)=\"handleFiles($event.target.files)\" class=\"input-file\"\r\n  [multiple]=\"multiple\" [accept]=\"accept\">",
                encapsulation: ViewEncapsulation.None,
                host: {
                    'class': 'ngx-mat-file-input'
                },
                providers: [
                    { provide: MatFormFieldControl, useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => NgxMatFileInputComponent)) }
                ],
                exportAs: 'ngx-mat-file-input',
                styles: [".mat-form-field-appearance-legacy .mat-form-field-prefix .ngx-mat-file-input--default-icon,.mat-form-field-appearance-legacy .mat-form-field-suffix .ngx-mat-file-input--default-icon{width:1em}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .ngx-mat-file-input--default-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .ngx-mat-file-input--default-icon{display:block;height:1.5em;width:1.5em}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .ngx-mat-file-input--default-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .ngx-mat-file-input--default-icon{margin:auto}.ngx-mat-file-input{align-items:center;display:flex;height:18px;line-height:18px}.ngx-mat-file-input .input-file{display:block;height:0;visibility:hidden;width:0}"]
            }] }
];
/** @nocollapse */
NgxMatFileInputComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Platform },
    { type: ChangeDetectorRef },
    { type: NgControl, decorators: [{ type: Optional }, { type: Self }] },
    { type: NgForm, decorators: [{ type: Optional }] },
    { type: FormGroupDirective, decorators: [{ type: Optional }] },
    { type: ErrorStateMatcher }
];
NgxMatFileInputComponent.propDecorators = {
    _inputFileRef: [{ type: ViewChild, args: ['inputFile', { static: true },] }],
    _inputValueRef: [{ type: ViewChild, args: ['inputValue', { static: true },] }],
    _customIcon: [{ type: ContentChild, args: [NgxMatFileInputIcon,] }],
    color: [{ type: Input }],
    disabled: [{ type: Input }],
    id: [{ type: Input }],
    multiple: [{ type: Input }],
    placeholder: [{ type: Input }],
    separator: [{ type: Input }],
    required: [{ type: Input }],
    errorStateMatcher: [{ type: Input }],
    value: [{ type: Input }],
    readonly: [{ type: Input }],
    accept: [{ type: Input }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgxMatFileInputComponent.prototype._inputFileRef;
    /**
     * @type {?}
     * @private
     */
    NgxMatFileInputComponent.prototype._inputValueRef;
    /**
     * Custom icon set by the consumer.
     * @type {?}
     */
    NgxMatFileInputComponent.prototype._customIcon;
    /** @type {?} */
    NgxMatFileInputComponent.prototype.color;
    /** @type {?} */
    NgxMatFileInputComponent.prototype.fileNames;
    /**
     * @type {?}
     * @protected
     */
    NgxMatFileInputComponent.prototype._uid;
    /**
     * @type {?}
     * @protected
     */
    NgxMatFileInputComponent.prototype._previousNativeValue;
    /** @type {?} */
    NgxMatFileInputComponent.prototype._ariaDescribedby;
    /** @type {?} */
    NgxMatFileInputComponent.prototype.stateChanges;
    /** @type {?} */
    NgxMatFileInputComponent.prototype.focused;
    /** @type {?} */
    NgxMatFileInputComponent.prototype.errorState;
    /** @type {?} */
    NgxMatFileInputComponent.prototype.controlType;
    /** @type {?} */
    NgxMatFileInputComponent.prototype.autofilled;
    /**
     * Function when touched
     * @type {?}
     */
    NgxMatFileInputComponent.prototype._onTouched;
    /**
     * Function when changed
     * @type {?}
     */
    NgxMatFileInputComponent.prototype._onChange;
    /**
     * @type {?}
     * @protected
     */
    NgxMatFileInputComponent.prototype._disabled;
    /**
     * @type {?}
     * @protected
     */
    NgxMatFileInputComponent.prototype._id;
    /**
     * @type {?}
     * @protected
     */
    NgxMatFileInputComponent.prototype._multiple;
    /** @type {?} */
    NgxMatFileInputComponent.prototype.placeholder;
    /** @type {?} */
    NgxMatFileInputComponent.prototype.separator;
    /**
     * @type {?}
     * @protected
     */
    NgxMatFileInputComponent.prototype._required;
    /** @type {?} */
    NgxMatFileInputComponent.prototype.errorStateMatcher;
    /**
     * @type {?}
     * @protected
     */
    NgxMatFileInputComponent.prototype._value;
    /**
     * @type {?}
     * @private
     */
    NgxMatFileInputComponent.prototype._readonly;
    /**
     * @type {?}
     * @private
     */
    NgxMatFileInputComponent.prototype._accept;
    /**
     * @type {?}
     * @protected
     */
    NgxMatFileInputComponent.prototype._elementRef;
    /**
     * @type {?}
     * @protected
     */
    NgxMatFileInputComponent.prototype._platform;
    /**
     * @type {?}
     * @private
     */
    NgxMatFileInputComponent.prototype._cd;
    /** @type {?} */
    NgxMatFileInputComponent.prototype.ngControl;
    /* Skipping unhandled member: ;*/
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZS1pbnB1dC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9maWxlLWlucHV0L3NyYy9saWIvZmlsZS1pbnB1dC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUM5RCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDakQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLFNBQVMsRUFBVyxVQUFVLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBYSxRQUFRLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxpQkFBaUIsRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3ZMLE9BQU8sRUFBeUMsa0JBQWtCLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBMkIsTUFBTSxnQkFBZ0IsQ0FBQztBQUN2SSxPQUFPLEVBQXVCLGlCQUFpQixFQUF5QyxlQUFlLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUN4SSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUNuRSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDOztJQUczQixZQUFZLEdBQUcsQ0FBQztBQUVwQixNQUFNLGVBQWU7Ozs7Ozs7SUFDbkIsWUFBbUIseUJBQTRDLEVBQ3RELFdBQW1CLEVBQ25CLGdCQUFvQyxFQUVwQyxTQUFvQjtRQUpWLDhCQUF5QixHQUF6Qix5QkFBeUIsQ0FBbUI7UUFDdEQsZ0JBQVcsR0FBWCxXQUFXLENBQVE7UUFDbkIscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFvQjtRQUVwQyxjQUFTLEdBQVQsU0FBUyxDQUFXO0lBQUksQ0FBQztDQUNuQzs7O0lBTGEsb0RBQW1EOztJQUM3RCxzQ0FBMEI7O0lBQzFCLDJDQUEyQzs7Ozs7SUFFM0Msb0NB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SUFBSTtZQWpJMEQsTUFBTSx1QkFrSWhGLFFBQVE7WUFsSW1DLGtCQUFrQix1QkFtSTdELFFBQVE7WUFsSWlCLGlCQUFpQjs7OzRCQXNDNUMsU0FBUyxTQUFDLFdBQVcsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUU7NkJBQ3ZDLFNBQVMsU0FBQyxZQUFZLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFOzBCQUd4QyxZQUFZLFNBQUMsbUJBQW1CO29CQUVoQyxLQUFLO3VCQW9CTCxLQUFLO2lCQWdCTCxLQUFLO3VCQUtMLEtBQUs7MEJBT0wsS0FBSzt3QkFDTCxLQUFLO3VCQUVMLEtBQUs7Z0NBS0wsS0FBSztvQkFFTCxLQUFLO3VCQU9MLEtBQUs7cUJBU0wsS0FBSzs7Ozs7OztJQWhGTixpREFBNEU7Ozs7O0lBQzVFLGtEQUE4RTs7Ozs7SUFHOUUsK0NBQW9FOztJQUVwRSx5Q0FBeUM7O0lBRXpDLDZDQUFnQzs7Ozs7SUFFaEMsd0NBQXVEOzs7OztJQUN2RCx3REFBb0M7O0lBQ3BDLG9EQUF5Qjs7SUFFekIsZ0RBQTJEOztJQUMzRCwyQ0FBeUI7O0lBQ3pCLDhDQUFvQjs7SUFDcEIsK0NBQTJDOztJQUMzQyw4Q0FBNEI7Ozs7O0lBRzVCLDhDQUF1Qjs7Ozs7SUFHdkIsNkNBQXdEOzs7OztJQWdCeEQsNkNBQTRCOzs7OztJQUs1Qix1Q0FBc0I7Ozs7O0lBT3RCLDZDQUE0Qjs7SUFFNUIsK0NBQStDOztJQUMvQyw2Q0FBaUM7Ozs7O0lBS2pDLDZDQUE0Qjs7SUFFNUIscURBQThDOzs7OztJQU85QywwQ0FBa0M7Ozs7O0lBS2xDLDZDQUF5Qjs7Ozs7SUFXekIsMkNBQXdCOzs7OztJQUVaLCtDQUE2Rjs7Ozs7SUFDdkcsNkNBQTZCOzs7OztJQUM3Qix1Q0FBOEI7O0lBQzlCLDZDQUErQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNvZXJjZUJvb2xlYW5Qcm9wZXJ0eSB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9jb2VyY2lvbic7XHJcbmltcG9ydCB7IFBsYXRmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL3BsYXRmb3JtJztcclxuaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0b3JSZWYsIENvbXBvbmVudCwgRG9DaGVjaywgRWxlbWVudFJlZiwgZm9yd2FyZFJlZiwgSW5wdXQsIE9uRGVzdHJveSwgT3B0aW9uYWwsIFNlbGYsIFZpZXdDaGlsZCwgVmlld0VuY2Fwc3VsYXRpb24sIERpcmVjdGl2ZSwgQ29udGVudENoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEFic3RyYWN0Q29udHJvbCwgQ29udHJvbFZhbHVlQWNjZXNzb3IsIEZvcm1Hcm91cERpcmVjdGl2ZSwgTmdDb250cm9sLCBOZ0Zvcm0sIFZhbGlkYXRvckZuLCBWYWxpZGF0b3JzIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xyXG5pbXBvcnQgeyBDYW5VcGRhdGVFcnJvclN0YXRlLCBFcnJvclN0YXRlTWF0Y2hlciwgVGhlbWVQYWxldHRlLCBDYW5VcGRhdGVFcnJvclN0YXRlQ3RvciwgbWl4aW5FcnJvclN0YXRlIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvY29yZSc7XHJcbmltcG9ydCB7IE1hdEZvcm1GaWVsZENvbnRyb2wgfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9mb3JtLWZpZWxkJztcclxuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBGaWxlT3JBcnJheUZpbGUgfSBmcm9tICcuL2ZpbGUtaW5wdXQtdHlwZSc7XHJcblxyXG5sZXQgbmV4dFVuaXF1ZUlkID0gMDtcclxuXHJcbmNsYXNzIE5neE1hdElucHV0QmFzZSB7XHJcbiAgY29uc3RydWN0b3IocHVibGljIF9kZWZhdWx0RXJyb3JTdGF0ZU1hdGNoZXI6IEVycm9yU3RhdGVNYXRjaGVyLFxyXG4gICAgcHVibGljIF9wYXJlbnRGb3JtOiBOZ0Zvcm0sXHJcbiAgICBwdWJsaWMgX3BhcmVudEZvcm1Hcm91cDogRm9ybUdyb3VwRGlyZWN0aXZlLFxyXG4gICAgLyoqIEBkb2NzLXByaXZhdGUgKi9cclxuICAgIHB1YmxpYyBuZ0NvbnRyb2w6IE5nQ29udHJvbCkgeyB9XHJcbn1cclxuY29uc3QgX05neE1hdElucHV0TWl4aW5CYXNlOiBDYW5VcGRhdGVFcnJvclN0YXRlQ3RvciAmIHR5cGVvZiBOZ3hNYXRJbnB1dEJhc2UgPVxyXG4gIG1peGluRXJyb3JTdGF0ZShOZ3hNYXRJbnB1dEJhc2UpO1xyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgc2VsZWN0b3I6ICdbbmd4TWF0RmlsZUlucHV0SWNvbl0nXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBOZ3hNYXRGaWxlSW5wdXRJY29uIHsgfVxyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICduZ3gtbWF0LWZpbGUtaW5wdXQnLFxyXG4gIHRlbXBsYXRlVXJsOiAnZmlsZS1pbnB1dC5jb21wb25lbnQuaHRtbCcsXHJcbiAgc3R5bGVVcmxzOiBbJ2ZpbGUtaW5wdXQuY29tcG9uZW50LnNjc3MnXSxcclxuICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lLFxyXG4gIGhvc3Q6IHtcclxuICAgICdjbGFzcyc6ICduZ3gtbWF0LWZpbGUtaW5wdXQnXHJcbiAgfSxcclxuICBwcm92aWRlcnM6IFtcclxuICAgIHsgcHJvdmlkZTogTWF0Rm9ybUZpZWxkQ29udHJvbCwgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gTmd4TWF0RmlsZUlucHV0Q29tcG9uZW50KSB9XHJcbiAgXSxcclxuICBleHBvcnRBczogJ25neC1tYXQtZmlsZS1pbnB1dCdcclxufSlcclxuZXhwb3J0IGNsYXNzIE5neE1hdEZpbGVJbnB1dENvbXBvbmVudCBleHRlbmRzIF9OZ3hNYXRJbnB1dE1peGluQmFzZSBpbXBsZW1lbnRzIE1hdEZvcm1GaWVsZENvbnRyb2w8RmlsZU9yQXJyYXlGaWxlPixcclxuICBPbkRlc3Ryb3ksIERvQ2hlY2ssIENhblVwZGF0ZUVycm9yU3RhdGUsIENvbnRyb2xWYWx1ZUFjY2Vzc29yIHtcclxuXHJcbiAgQFZpZXdDaGlsZCgnaW5wdXRGaWxlJywgeyBzdGF0aWM6IHRydWUgfSkgcHJpdmF0ZSBfaW5wdXRGaWxlUmVmOiBFbGVtZW50UmVmO1xyXG4gIEBWaWV3Q2hpbGQoJ2lucHV0VmFsdWUnLCB7IHN0YXRpYzogdHJ1ZSB9KSBwcml2YXRlIF9pbnB1dFZhbHVlUmVmOiBFbGVtZW50UmVmO1xyXG5cclxuICAvKiogQ3VzdG9tIGljb24gc2V0IGJ5IHRoZSBjb25zdW1lci4gKi9cclxuICBAQ29udGVudENoaWxkKE5neE1hdEZpbGVJbnB1dEljb24pIF9jdXN0b21JY29uOiBOZ3hNYXRGaWxlSW5wdXRJY29uO1xyXG5cclxuICBASW5wdXQoKSBjb2xvcjogVGhlbWVQYWxldHRlID0gJ3ByaW1hcnknO1xyXG5cclxuICBwdWJsaWMgZmlsZU5hbWVzOiBzdHJpbmcgPSBudWxsO1xyXG5cclxuICBwcm90ZWN0ZWQgX3VpZCA9IGBuZ3gtbWF0LWZpbGVpbnB1dC0ke25leHRVbmlxdWVJZCsrfWA7XHJcbiAgcHJvdGVjdGVkIF9wcmV2aW91c05hdGl2ZVZhbHVlOiBhbnk7XHJcbiAgX2FyaWFEZXNjcmliZWRieTogc3RyaW5nO1xyXG5cclxuICByZWFkb25seSBzdGF0ZUNoYW5nZXM6IFN1YmplY3Q8dm9pZD4gPSBuZXcgU3ViamVjdDx2b2lkPigpO1xyXG4gIGZvY3VzZWQ6IGJvb2xlYW4gPSBmYWxzZTtcclxuICBlcnJvclN0YXRlOiBib29sZWFuO1xyXG4gIGNvbnRyb2xUeXBlOiBzdHJpbmcgPSAnbmd4LW1hdC1maWxlLWlucHV0JztcclxuICBhdXRvZmlsbGVkOiBib29sZWFuID0gZmFsc2U7XHJcblxyXG4gIC8qKiBGdW5jdGlvbiB3aGVuIHRvdWNoZWQgKi9cclxuICBfb25Ub3VjaGVkID0gKCkgPT4geyB9O1xyXG5cclxuICAvKiogRnVuY3Rpb24gd2hlbiBjaGFuZ2VkICovXHJcbiAgX29uQ2hhbmdlOiAodmFsdWU6IEZpbGVPckFycmF5RmlsZSkgPT4gdm9pZCA9ICgpID0+IHsgfTtcclxuXHJcbiAgQElucHV0KClcclxuICBnZXQgZGlzYWJsZWQoKTogYm9vbGVhbiB7XHJcbiAgICBpZiAodGhpcy5uZ0NvbnRyb2wgJiYgdGhpcy5uZ0NvbnRyb2wuZGlzYWJsZWQgIT09IG51bGwpIHtcclxuICAgICAgcmV0dXJuIHRoaXMubmdDb250cm9sLmRpc2FibGVkO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRoaXMuX2Rpc2FibGVkO1xyXG4gIH1cclxuICBzZXQgZGlzYWJsZWQodmFsdWU6IGJvb2xlYW4pIHtcclxuICAgIHRoaXMuX2Rpc2FibGVkID0gY29lcmNlQm9vbGVhblByb3BlcnR5KHZhbHVlKTtcclxuICAgIGlmICh0aGlzLmZvY3VzZWQpIHtcclxuICAgICAgdGhpcy5mb2N1c2VkID0gZmFsc2U7XHJcbiAgICAgIHRoaXMuc3RhdGVDaGFuZ2VzLm5leHQoKTtcclxuICAgIH1cclxuICB9XHJcbiAgcHJvdGVjdGVkIF9kaXNhYmxlZCA9IGZhbHNlO1xyXG5cclxuICBASW5wdXQoKVxyXG4gIGdldCBpZCgpOiBzdHJpbmcgeyByZXR1cm4gdGhpcy5faWQ7IH1cclxuICBzZXQgaWQodmFsdWU6IHN0cmluZykgeyB0aGlzLl9pZCA9IHZhbHVlIHx8IHRoaXMuX3VpZDsgfVxyXG4gIHByb3RlY3RlZCBfaWQ6IHN0cmluZztcclxuXHJcbiAgQElucHV0KClcclxuICBnZXQgbXVsdGlwbGUoKTogYm9vbGVhbiB7IHJldHVybiB0aGlzLl9tdWx0aXBsZTsgfVxyXG4gIHNldCBtdWx0aXBsZSh2YWx1ZTogYm9vbGVhbikge1xyXG4gICAgdGhpcy5fbXVsdGlwbGUgPSBjb2VyY2VCb29sZWFuUHJvcGVydHkodmFsdWUpO1xyXG4gIH1cclxuICBwcm90ZWN0ZWQgX211bHRpcGxlID0gZmFsc2U7XHJcblxyXG4gIEBJbnB1dCgpIHBsYWNlaG9sZGVyOiBzdHJpbmcgPSAnQ2hvb3NlIGEgZmlsZSc7XHJcbiAgQElucHV0KCkgc2VwYXJhdG9yOiBzdHJpbmcgPSAnLCc7XHJcblxyXG4gIEBJbnB1dCgpXHJcbiAgZ2V0IHJlcXVpcmVkKCk6IGJvb2xlYW4geyByZXR1cm4gdGhpcy5fcmVxdWlyZWQ7IH1cclxuICBzZXQgcmVxdWlyZWQodmFsdWU6IGJvb2xlYW4pIHsgdGhpcy5fcmVxdWlyZWQgPSBjb2VyY2VCb29sZWFuUHJvcGVydHkodmFsdWUpOyB9XHJcbiAgcHJvdGVjdGVkIF9yZXF1aXJlZCA9IGZhbHNlO1xyXG5cclxuICBASW5wdXQoKSBlcnJvclN0YXRlTWF0Y2hlcjogRXJyb3JTdGF0ZU1hdGNoZXI7XHJcblxyXG4gIEBJbnB1dCgpXHJcbiAgZ2V0IHZhbHVlKCk6IEZpbGVPckFycmF5RmlsZSB7IHJldHVybiB0aGlzLl92YWx1ZTsgfVxyXG4gIHNldCB2YWx1ZSh2YWx1ZTogRmlsZU9yQXJyYXlGaWxlKSB7XHJcbiAgICB0aGlzLl92YWx1ZSA9IHZhbHVlO1xyXG4gIH1cclxuICBwcm90ZWN0ZWQgX3ZhbHVlOiBGaWxlT3JBcnJheUZpbGU7XHJcblxyXG4gIEBJbnB1dCgpXHJcbiAgZ2V0IHJlYWRvbmx5KCk6IGJvb2xlYW4geyByZXR1cm4gdGhpcy5fcmVhZG9ubHk7IH1cclxuICBzZXQgcmVhZG9ubHkodmFsdWU6IGJvb2xlYW4pIHsgdGhpcy5fcmVhZG9ubHkgPSBjb2VyY2VCb29sZWFuUHJvcGVydHkodmFsdWUpOyB9XHJcbiAgcHJpdmF0ZSBfcmVhZG9ubHkgPSB0cnVlO1xyXG5cclxuICAvKipcclxuICAgKiBMaW1pdGluZyBhY2NlcHRlZCBmaWxlIHR5cGVzXHJcbiAgICogRXhhbXBsZTogYWNjZXB0PVwiaW1hZ2UvcG5nLCBpbWFnZS9qcGVnXCIgb3IgYWNjZXB0PVwiLnBuZywgLmpwZywgLmpwZWdcIiDigJQgQWNjZXB0IFBORyBvciBKUEVHIGZpbGVzLlxyXG4gICAqL1xyXG4gIEBJbnB1dCgpXHJcbiAgZ2V0IGFjY2VwdCgpOiBzdHJpbmcgeyByZXR1cm4gdGhpcy5fYWNjZXB0OyB9XHJcbiAgc2V0IGFjY2VwdCh2YWx1ZTogc3RyaW5nKSB7XHJcbiAgICB0aGlzLl9hY2NlcHQgPSB2YWx1ZTtcclxuICB9XHJcbiAgcHJpdmF0ZSBfYWNjZXB0OiBzdHJpbmc7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBfZWxlbWVudFJlZjogRWxlbWVudFJlZjxIVE1MSW5wdXRFbGVtZW50IHwgSFRNTFNlbGVjdEVsZW1lbnQgfCBIVE1MVGV4dEFyZWFFbGVtZW50PixcclxuICAgIHByb3RlY3RlZCBfcGxhdGZvcm06IFBsYXRmb3JtLFxyXG4gICAgcHJpdmF0ZSBfY2Q6IENoYW5nZURldGVjdG9yUmVmLFxyXG4gICAgQE9wdGlvbmFsKCkgQFNlbGYoKSBwdWJsaWMgbmdDb250cm9sOiBOZ0NvbnRyb2wsXHJcbiAgICBAT3B0aW9uYWwoKSBfcGFyZW50Rm9ybTogTmdGb3JtLFxyXG4gICAgQE9wdGlvbmFsKCkgX3BhcmVudEZvcm1Hcm91cDogRm9ybUdyb3VwRGlyZWN0aXZlLFxyXG4gICAgX2RlZmF1bHRFcnJvclN0YXRlTWF0Y2hlcjogRXJyb3JTdGF0ZU1hdGNoZXIpIHtcclxuICAgIHN1cGVyKF9kZWZhdWx0RXJyb3JTdGF0ZU1hdGNoZXIsIF9wYXJlbnRGb3JtLCBfcGFyZW50Rm9ybUdyb3VwLCBuZ0NvbnRyb2wpO1xyXG5cclxuICAgIHRoaXMuaWQgPSB0aGlzLmlkO1xyXG5cclxuICAgIGlmICh0aGlzLm5nQ29udHJvbCkge1xyXG4gICAgICB0aGlzLm5nQ29udHJvbC52YWx1ZUFjY2Vzc29yID0gdGhpcztcclxuICAgIH1cclxuXHJcbiAgfVxyXG5cclxuXHJcbiAgbmdPbkNoYW5nZXMoKSB7XHJcbiAgICB0aGlzLnN0YXRlQ2hhbmdlcy5uZXh0KCk7XHJcbiAgfVxyXG5cclxuICBuZ09uRGVzdHJveSgpIHtcclxuICAgIHRoaXMuc3RhdGVDaGFuZ2VzLmNvbXBsZXRlKCk7XHJcbiAgfVxyXG5cclxuICBuZ0RvQ2hlY2soKSB7XHJcbiAgICBpZiAodGhpcy5uZ0NvbnRyb2wpIHtcclxuICAgICAgdGhpcy51cGRhdGVFcnJvclN0YXRlKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBJbXBsZW1lbnRlZCBhcyBwYXJ0IG9mIENvbnRyb2xWYWx1ZUFjY2Vzc29yLlxyXG4gIHdyaXRlVmFsdWUodmFsdWU6IEZpbGVPckFycmF5RmlsZSk6IHZvaWQge1xyXG4gICAgdGhpcy5fdXBkYXRlSW5wdXRWYWx1ZSh2YWx1ZSk7XHJcbiAgfVxyXG5cclxuICAvLyBJbXBsZW1lbnRlZCBhcyBwYXJ0IG9mIENvbnRyb2xWYWx1ZUFjY2Vzc29yLlxyXG4gIHJlZ2lzdGVyT25DaGFuZ2UoZm46ICh2YWx1ZTogYW55KSA9PiB2b2lkKTogdm9pZCB7XHJcbiAgICB0aGlzLl9vbkNoYW5nZSA9IGZuO1xyXG4gIH1cclxuXHJcbiAgLy8gSW1wbGVtZW50ZWQgYXMgcGFydCBvZiBDb250cm9sVmFsdWVBY2Nlc3Nvci5cclxuICByZWdpc3Rlck9uVG91Y2hlZChmbjogKCkgPT4gdm9pZCk6IHZvaWQge1xyXG4gICAgdGhpcy5fb25Ub3VjaGVkID0gZm47XHJcbiAgfVxyXG5cclxuICAvLyBJbXBsZW1lbnRlZCBhcyBwYXJ0IG9mIENvbnRyb2xWYWx1ZUFjY2Vzc29yLlxyXG4gIHNldERpc2FibGVkU3RhdGUoaXNEaXNhYmxlZDogYm9vbGVhbik6IHZvaWQge1xyXG4gICAgdGhpcy5kaXNhYmxlZCA9IGlzRGlzYWJsZWQ7XHJcbiAgICB0aGlzLnN0YXRlQ2hhbmdlcy5uZXh0KCk7XHJcbiAgfVxyXG5cclxuICAvKiogRm9jdXNlcyB0aGUgaW5wdXQuICovXHJcbiAgZm9jdXMob3B0aW9ucz86IEZvY3VzT3B0aW9ucyk6IHZvaWQge1xyXG4gICAgdGhpcy5faW5wdXRWYWx1ZVJlZi5uYXRpdmVFbGVtZW50LmZvY3VzKG9wdGlvbnMpO1xyXG4gIH1cclxuXHJcbiAgX2ZvY3VzQ2hhbmdlZChpc0ZvY3VzZWQ6IGJvb2xlYW4pIHtcclxuICAgIGlmIChpc0ZvY3VzZWQgIT09IHRoaXMuZm9jdXNlZCAmJiAoIXRoaXMucmVhZG9ubHkgfHwgIWlzRm9jdXNlZCkpIHtcclxuICAgICAgdGhpcy5mb2N1c2VkID0gaXNGb2N1c2VkO1xyXG4gICAgICB0aGlzLnN0YXRlQ2hhbmdlcy5uZXh0KCk7XHJcbiAgICB9XHJcblxyXG4gIH1cclxuXHJcbiAgLyoqIE1hcmsgdGhlIGZpZWxkIGFzIHRvdWNoZWQgKi9cclxuICBfbWFya0FzVG91Y2hlZCgpIHtcclxuICAgIHRoaXMuX29uVG91Y2hlZCgpO1xyXG4gICAgdGhpcy5fY2QubWFya0ZvckNoZWNrKCk7XHJcbiAgICB0aGlzLnN0YXRlQ2hhbmdlcy5uZXh0KCk7XHJcbiAgfVxyXG5cclxuICBwcm90ZWN0ZWQgX2lzQmFkSW5wdXQoKSB7XHJcbiAgICBsZXQgdmFsaWRpdHkgPSAodGhpcy5faW5wdXRWYWx1ZVJlZi5uYXRpdmVFbGVtZW50IGFzIEhUTUxJbnB1dEVsZW1lbnQpLnZhbGlkaXR5O1xyXG4gICAgcmV0dXJuIHZhbGlkaXR5ICYmIHZhbGlkaXR5LmJhZElucHV0O1xyXG4gIH1cclxuXHJcbiAgZ2V0IGVtcHR5KCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuICF0aGlzLl9pbnB1dFZhbHVlUmVmLm5hdGl2ZUVsZW1lbnQudmFsdWUgJiYgIXRoaXMuX2lzQmFkSW5wdXQoKSAmJlxyXG4gICAgICAhdGhpcy5hdXRvZmlsbGVkO1xyXG4gIH1cclxuXHJcbiAgZ2V0IHNob3VsZExhYmVsRmxvYXQoKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdGhpcy5mb2N1c2VkIHx8ICF0aGlzLmVtcHR5O1xyXG4gIH1cclxuXHJcbiAgc2V0RGVzY3JpYmVkQnlJZHMoaWRzOiBzdHJpbmdbXSkge1xyXG4gICAgdGhpcy5fYXJpYURlc2NyaWJlZGJ5ID0gaWRzLmpvaW4oJyAnKTtcclxuICB9XHJcblxyXG4gIG9wZW5GaWxlUGlja2VyKGV2ZW50PzogTW91c2VFdmVudCkge1xyXG4gICAgdGhpcy5faW5wdXRGaWxlUmVmLm5hdGl2ZUVsZW1lbnQuY2xpY2soKTtcclxuICAgIGlmIChldmVudCkge1xyXG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgIH1cclxuICAgIHRoaXMuX21hcmtBc1RvdWNoZWQoKTtcclxuICB9XHJcblxyXG4gIGhhbmRsZUZpbGVzKGZpbGVsaXN0OiBGaWxlTGlzdCkge1xyXG4gICAgaWYgKGZpbGVsaXN0Lmxlbmd0aCA+IDApIHtcclxuICAgICAgY29uc3QgZmlsZXM6IEFycmF5PEZpbGU+ID0gbmV3IEFycmF5KCk7XHJcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZmlsZWxpc3QubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBmaWxlcy5wdXNoKGZpbGVsaXN0Lml0ZW0oaSkpO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMuX3VwZGF0ZUlucHV0VmFsdWUoZmlsZXMpO1xyXG4gICAgICB0aGlzLl9yZXNldElucHV0RmlsZSgpO1xyXG4gICAgICB0aGlzLl9vbkNoYW5nZSh0aGlzLm11bHRpcGxlID8gZmlsZXMgOiBmaWxlc1swXSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKiogSGFuZGxlcyBhIGNsaWNrIG9uIHRoZSBjb250cm9sJ3MgY29udGFpbmVyLiAqL1xyXG4gIG9uQ29udGFpbmVyQ2xpY2soZXZlbnQ6IE1vdXNlRXZlbnQpIHsgfTtcclxuXHJcbiAgcHJpdmF0ZSBfcmVzZXRJbnB1dEZpbGUoKSB7XHJcbiAgICB0aGlzLl9pbnB1dEZpbGVSZWYubmF0aXZlRWxlbWVudC52YWx1ZSA9IFwiXCI7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIF91cGRhdGVJbnB1dFZhbHVlKGZpbGVzOiBGaWxlT3JBcnJheUZpbGUpIHtcclxuICAgIGxldCB0ZXh0ID0gbnVsbDtcclxuICAgIGlmIChmaWxlcykge1xyXG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShmaWxlcykpIHtcclxuICAgICAgICB0ZXh0ID0gdGhpcy5fbXVsdGlwbGVcclxuICAgICAgICAgID8gZmlsZXMubWFwKHggPT4geC5uYW1lKS5qb2luKHRoaXMuc2VwYXJhdG9yKVxyXG4gICAgICAgICAgOiBmaWxlc1swXS5uYW1lO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRleHQgPSBmaWxlcy5uYW1lICE9IG51bGwgPyBmaWxlcy5uYW1lIDogbnVsbDtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuX2lucHV0VmFsdWVSZWYubmF0aXZlRWxlbWVudC52YWx1ZSA9IHRleHQ7XHJcbiAgfVxyXG5cclxufVxyXG4iXX0=