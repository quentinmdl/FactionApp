import { Platform } from '@angular/cdk/platform';
import { ChangeDetectorRef, DoCheck, ElementRef, OnDestroy } from '@angular/core';
import { ControlValueAccessor, FormGroupDirective, NgControl, NgForm } from '@angular/forms';
import { CanUpdateErrorState, ErrorStateMatcher, ThemePalette, CanUpdateErrorStateCtor } from '@angular/material/core';
import { MatFormFieldControl } from '@angular/material/form-field';
import { Subject } from 'rxjs';
import { FileOrArrayFile } from './file-input-type';
declare class NgxMatInputBase {
    _defaultErrorStateMatcher: ErrorStateMatcher;
    _parentForm: NgForm;
    _parentFormGroup: FormGroupDirective;
    /** @docs-private */
    ngControl: NgControl;
    constructor(_defaultErrorStateMatcher: ErrorStateMatcher, _parentForm: NgForm, _parentFormGroup: FormGroupDirective, 
    /** @docs-private */
    ngControl: NgControl);
}
declare const _NgxMatInputMixinBase: CanUpdateErrorStateCtor & typeof NgxMatInputBase;
export declare class NgxMatFileInputIcon {
}
export declare class NgxMatFileInputComponent extends _NgxMatInputMixinBase implements MatFormFieldControl<FileOrArrayFile>, OnDestroy, DoCheck, CanUpdateErrorState, ControlValueAccessor {
    protected _elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>;
    protected _platform: Platform;
    private _cd;
    ngControl: NgControl;
    private _inputFileRef;
    private _inputValueRef;
    /** Custom icon set by the consumer. */
    _customIcon: NgxMatFileInputIcon;
    color: ThemePalette;
    fileNames: string;
    protected _uid: string;
    protected _previousNativeValue: any;
    _ariaDescribedby: string;
    readonly stateChanges: Subject<void>;
    focused: boolean;
    errorState: boolean;
    controlType: string;
    autofilled: boolean;
    /** Function when touched */
    _onTouched: () => void;
    /** Function when changed */
    _onChange: (value: FileOrArrayFile) => void;
    get disabled(): boolean;
    set disabled(value: boolean);
    protected _disabled: boolean;
    get id(): string;
    set id(value: string);
    protected _id: string;
    get multiple(): boolean;
    set multiple(value: boolean);
    protected _multiple: boolean;
    placeholder: string;
    separator: string;
    get required(): boolean;
    set required(value: boolean);
    protected _required: boolean;
    errorStateMatcher: ErrorStateMatcher;
    get value(): FileOrArrayFile;
    set value(value: FileOrArrayFile);
    protected _value: FileOrArrayFile;
    get readonly(): boolean;
    set readonly(value: boolean);
    private _readonly;
    /**
     * Limiting accepted file types
     * Example: accept="image/png, image/jpeg" or accept=".png, .jpg, .jpeg" â€” Accept PNG or JPEG files.
     */
    get accept(): string;
    set accept(value: string);
    private _accept;
    constructor(_elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>, _platform: Platform, _cd: ChangeDetectorRef, ngControl: NgControl, _parentForm: NgForm, _parentFormGroup: FormGroupDirective, _defaultErrorStateMatcher: ErrorStateMatcher);
    ngOnChanges(): void;
    ngOnDestroy(): void;
    ngDoCheck(): void;
    writeValue(value: FileOrArrayFile): void;
    registerOnChange(fn: (value: any) => void): void;
    registerOnTouched(fn: () => void): void;
    setDisabledState(isDisabled: boolean): void;
    /** Focuses the input. */
    focus(options?: FocusOptions): void;
    _focusChanged(isFocused: boolean): void;
    /** Mark the field as touched */
    _markAsTouched(): void;
    protected _isBadInput(): boolean;
    get empty(): boolean;
    get shouldLabelFloat(): boolean;
    setDescribedByIds(ids: string[]): void;
    openFilePicker(event?: MouseEvent): void;
    handleFiles(filelist: FileList): void;
    /** Handles a click on the control's container. */
    onContainerClick(event: MouseEvent): void;
    private _resetInputFile;
    private _updateInputValue;
}
export {};
